예제) Abel이라는 사원이 받는 급여보다 더 많은 급여를 받는 사원의 이름과 급여를 출력

select last_name, salary
from employees
where salary > (select salary
		from employees
		where last_name = 'Abel')

==>>> 서브 쿼리 p. 264

1. 특정 값을 모를때 자주 사용됨
2. 일반적으로 서브쿼리가 먼저 실행되어 그 결과를 메인 쿼리가 사용함
3. 반대의 경우는 상호관련 쿼리라고 한다.
4. group by 절 외에 다른 절에서는 전부 서브 쿼리를 사용할 수 있음
5. 항상 괄호로 묶여있음
6. 서브쿼리에는 제한이 없다.
 단, 서브쿼리안에 서브쿼리가 들어갈 수 있다.
-------------------------------------------------------------------------------------------
* where 절과  having 절에서 사용되는 서브 쿼리 - 조건식을 사용하는 절

 - 값을 대체하기 위해 서브쿼리 사용


======================== 사용 지침 ========================
 1. 내가 무슨 값을 모르는지 찾자...( abel의 급여 )
 2. 모르는 값을 서브쿼리의  select list 설정
   - 급여를 모른다 -> 서브쿼리에서 salary
 3. 서브쿼리가 넘겨준 컬럼의 값을 누가 받을것인지 결정
   - 메인쿼리의 where, having 절의 컬럼이 받는다
   - where salary > ( 서브 쿼리 결과 11000 )
 4. 어떤 연산자가 값을 넘겨줄지 결정
 5. where 절과 having에서는 서브쿼리에 order by는 안 쓰는게 좋음
   -> 성능이 떨어짐 -> order by 절은 가장 나중에 정렬되므로 다 출력후 해도됨
 6. 단일 행 서브 쿼리 : 한개 값을 돌려줌
    다중 행 서브 쿼리 : 여러개의 값을 돌려줌
 7. 단일 행 서브 쿼리에는 단일 행 연산자 ( > , <, = ) 를 사용 하고
    다중 행 서브 쿼리에는 복수 행 연산자 ( in ) 을 사용 해야한다.

** where 절
예제 ) IT라는 부서에 근무하는 사원의 이름과 급여를 출력
select e.last_name, e.salary
from employees e, departments d
where e.department_id = d.department_id
and department_name = 'IT'

==>>> 조인 없이 서브쿼리로 해결 가능 ==>> 성능 증가

select last_name, salary
from employees
where department_id = ( select department_id
			from departments
			where department_name = 'IT' )


p. 271

select last_name, job_id, salary
from employees
where job_id = (select job_id
		from employees
		where employee_id = 141 )
and salary > (select salary
		from employees
		where employee_id = 143)


** having 절
 - where 절과 비슷함

p. 276 
* 다중 행 서브 쿼리

테이블값 : 10 20 30 40 50 60
서브쿼리 결과 ( 30, 40 )

 - 연산자 ( all 과 any 바로 뒤에 서브쿼리 결과가 있다고 생각하고 비교 )
1. in : 동일한 값				=> 30, 40
2. > all : 결과 전부 또는 최댓값보다 큰값	=> 50, 60
3. < all : 결과 전부 또는 최솟값보다 작은값	=> 10, 20
4. > any : 결과의 최솟값보다 큰값		=> 40, 50, 60
5. < any : 결과의 최댓값보다 작은값		=> 10, 20, 30


예제 ) Zlotkey 와 동일한 부서에 근무하는 다른 모든 사원들의 사번 및 고용날짜 출력

select employee_id, hire_date
from employees
where department_id in ( select department_id
			from employees
			where last_name = 'Zlotkey' )
and last_name != 'Zlotkey'

예제 ) 회사 전체 평균 급여보다 더 급여를 많이 받는 사원들의 사번과 이름을 출력

SQ => 회사 전체 평균 급여

select employee_id, last_name
from employees
where salary > (select avg(salary)
		from employees )

예제 ) 이름에 u 가 포함되는 사원들과 동일 부서에 근무하는 사원들의 사번 및 이름 출력

SQ = 이름에 u 가 포함되는 사원들의 부서번호

select employee_id, last_name
from employees
where department_id in ( select department_id
			from employees
			where last_name like '%u%' )

예제 ) 시애틀에 근무하는 사람 중 커미션을 받지않는 모든 사람들의 이름, 부서명,
지역ID 출력

SQ = 시애틀의 location id

select e.last_name, d.department_name, d.location_id
from employees e, departments d
where e.department_id = d.department_id
and e.commission_pct is null
and d.location_id = (select location_id
		from locations
		where city = 'Seattle')

예제 ) 이름이 DAVIES인 사람보다 후에 고용된 사원들의 이름 및 고용일자를 출력
고용일자는 역순으로 출력

SQ = DAVIES의 고용된 날짜

select last_name, hire_date
from employees
where hire_date > (select hire_date
		from employees
		where last_name = 'Davies' )

order by hire_date desc

예제 ) King 을 매니저로 두고 있는 모든 사원들의 이름 및 급여를 출력

SQ = King이 매니저인 사원( King 이 두명이였음 )

select last_name, salary
from employees
where manager_id in ( select employee_id 
			from employees
			where last_name = 'King' )

예제 ) 회사 전체 평균급여보다 더 많이 받는 사원들 중에
이름에 u 가 있는 사원들이 근무하는 부서에서 근무하는 사원들의 사번, 이름 및 급여를 출력

SQ = 회사 전체 평균급여
SQ = 이름에 u 가 있는 사원들이 근무하는 부서


select employee_id, last_name, salary
from employees
where department_id in (select department_id
		from employees
		where last_name like '%u%'
		and salary > ( select avg(salary)
				from employees ) )





